<?php
namespace app\model;
use think\Model;
use think\model\concern\SoftDelete;

class User extends Model
{

    public function profile()
    {
        //参数一：附表关联模型
        //参数二：附表的外键：user_id
        //参数三：主表的主键：id
        //return $this->hasOne('Profile','user_id','id');

        //一对多查询
        //return $this->hasMany('Profile','user_id','id');
    }

    public function book()
    {
        //return $this->hasOne('Book','user_id','id');
    }

    public function roles()
    {
        return $this->belongsToMany('Role', 'Access', 'role_id', 'user_id');
    }






















//    //设置主键
//    protected $pk = 'id';
//
//    //设置其它表
//    protected $table = 'tp_user';
//
//    //开启自动时间戳
//    protected $autoWriteTimestamp = 'datetime';
//
//    use SoftDelete;
//    protected $deleteTime = 'delete_time';
//
//    //protected $createTime = 'create_at';
//    //protected $updateTime = 'update_at';
//
//    //设置只读字段
//    //protected $readonly = ['username', 'email'];
//
//    //设置类型转换
//    protected $type = [
//        'price'         =>      'integer',
//        'status'        =>      'boolean',
//        'create_time'   =>      'datetime:Y-m-d',
//        //'email'         =>      'integer'
//    ];
//
//    //数据自动完成
//    protected $auto   = ['email'];
//    protected $insert = ['uid'=>1];
//    protected $update = [];
//
//    //设置json字段
//    protected $json = ['details', 'list'];
//
//    public $name = 'Mr.Wang';
//
//    //设置全局查询
////    protected function base($query)
////    {
////        $query->where('status', 1);
////    }
//
//    //初始化
//    protected static function init()
//    {
//        self::event('after_update', function ($query) {
//            echo '已更新完毕...';
//        });
//        //parent::init(); // TODO: Change the autogenerated stub
//        self::event('before_update', function ($query) {
//            echo '开始准备更新...';
//        });
//
//
//    }
//
//    public function getEmail()
//    {
//        return self::where('username', '辉夜')->find()->getAttr('email');
//    }
//
//    //创建一个获取器，status字段
////    public function getStatusAttr($value)
////    {
////        $myGet = [-1=>'删除', 0=>'禁用', 1=>'正常', 2=>'待审核'];
////        return $myGet[$value];
////    }
//
//    //创建一个虚拟字段的获取器，可以对多字段进行过滤
//    public function getNothingAttr($value, $data)
//    {
//        $myGet = [-1=>'删除', 0=>'禁用', 1=>'正常', 2=>'待审核'];
//        return $myGet[$data['status']];
//    }
//
//    //创建一个修改器
//    public function setEmailAttr($value)
//    {
//        return strtoupper($value);
//    }
//
//    //创建一个搜索器，邮箱模糊查询
//    public function searchEmailAttr($query, $value, $data)
//    {
//        $query->where('email', 'like', $value.'%');
//        if (isset($data['sort'])) {
//            $query->order($data['sort']);
//        }
//    }
//
//    public function searchCreateTimeAttr($query, $value)
//    {
//        $query->whereBetweenTime('create_time', $value[0], $value[1]);
//    }
//
//    //创建一个查询范围
//    public function scopeGenderMale($query)
//    {
//        $query->where('gender', '男')->limit(5);
//    }
//
//    public function scopeEmailLike($query, $value)
//    {
//        $query->where('email', 'like', '%'.$value.'%');
//    }
//
//    public function scopePriceGreater($query, $value)
//    {
//        $query->where('price', '>', $value);
//    }

}